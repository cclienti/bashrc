# -*- shell-script -*-

### Manage out of source build directories ###########################
#
# Keeps tracks of all your out of source builds by creating dedicated
# directories per repository AND branch.
#
# Before all things, two global variables must be set:
# ----------------------------------------------------
#
# - MY_SOURCE_BUILD_DIR: the desired target build directory.
#
# - MY_SOURCE_HOME_DIR: the root path of all your repositories,
#   usually $HOME/src or $HOME if you have multiple global source
#   directories (src, work, ...)
#
# Two commands are provided:
# --------------------------
#
# - The "cdb" command provides the following feature:
#
#   # Create a build directory in "MY_SOURCE_BUILD_DIR" that reflects
#     the repository and the branch selected. The created directory
#     path is exported in the variable "pwd_build".
#
#   # Create a link in the repository root that targets the compile
#     commands in the build directory (useful for Language Server
#     Protocol).
#
#   # Export the variable "pwd_source" that points to the directory
#     where 'cdb' command is called.
#
#   # Change the current directory to "$pwd_build"
#
# The "cds" command comes back to the pwd_source directory.
#

get_build_dir() {
    pwd_source_repo=$(git rev-parse --show-toplevel)
    path_in_repo=$(realpath --relative-to="${pwd_source_repo}" .)
    branch=$(git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/^* \(.*\)/\1/')
    dest_path=${MY_SOURCE_BUILD_DIR}${pwd_source_repo#${MY_SOURCE_HOME_DIR}}/${branch}/${path_in_repo}
    echo ${dest_path}
}

link_compile_command() {
    build_dir=$(realpath $1)
    pwd_source_repo=$(git rev-parse --show-toplevel)
    rm -f ${pwd_source_repo}/compile_commands.json
    ln -s $(echo "${build_dir}/compile_commands.json") $(realpath ${pwd_source_repo})/compile_commands.json
}

cdb() {
    if [[ "$(pwd)" != "${pwd_build}" ]]; then
        export pwd_source=$(pwd -L)
        export pwd_build=$(get_build_dir);
        mkdir -p ${pwd_build}
        # link_compile_command ${pwd_build}
        rm -f ${pwd_source}/compile_commands.json
        ln -sf ${pwd_build}/compile_commands.json ${pwd_source}
        cd ${pwd_build}
    fi
}

alias cds='cd ${pwd_source}'
